{"ast":null,"code":"var _jsxFileName = \"E:\\\\01-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Header from './components/Header/Header';\nimport ResultTable from './components/ResultTable/ResultTable';\nimport UserInput from './components/UserInput/UserInput';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = userInput => {\n    setUserInput(userInput);\n  };\n  if (userInput) {\n    const yearlyData = [];\n    let currentSavings = +userInput['current-savings'];\n    const yearlyContribution = +userInput['yearly-contribution'];\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    setUserInput(yearlyData);\n    console.log();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nCOotz9vTgzH/m310d2/03oFEtk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","ResultTable","UserInput","useState","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","_c","$RefreshReg$"],"sources":["E:/01-starting-project/src/App.js"],"sourcesContent":["import Header from './components/Header/Header';\nimport ResultTable from './components/ResultTable/ResultTable';\nimport UserInput from './components/UserInput/UserInput';\nimport { useState } from 'react';\n\n\n\nfunction App() {\n\n  const [userInput, setUserInput] = useState(null)\n\n\n\n  const calculateHandler = (userInput) => {\n    setUserInput(userInput)\n  };\n\n  if (userInput) {\n    const yearlyData = [];\n\n    let currentSavings = +userInput['current-savings'];\n    const yearlyContribution = +userInput['yearly-contribution'];\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    setUserInput(yearlyData)\n    console.log();\n    \n  }\n\n  return (\n    <div>\n      <Header />\n      <UserInput onCalculate={calculateHandler} />\n      <ResultTable />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,WAAW,MAAM,sCAAsC;AAC9D,OAAOC,SAAS,MAAM,kCAAkC;AACxD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAIhD,MAAMO,gBAAgB,GAAIF,SAAS,IAAK;IACtCC,YAAY,CAACD,SAAS,CAAC;EACzB,CAAC;EAED,IAAIA,SAAS,EAAE;IACb,MAAMG,UAAU,GAAG,EAAE;IAErB,IAAIC,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC;IAClD,MAAMK,kBAAkB,GAAG,CAACL,SAAS,CAAC,qBAAqB,CAAC;IAC5D,MAAMM,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMO,QAAQ,GAAG,CAACP,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IAEAJ,YAAY,CAACE,UAAU,CAAC;IACxBU,OAAO,CAACC,GAAG,CAAC,CAAC;EAEf;EAEA,oBACEjB,OAAA;IAAAkB,QAAA,gBACElB,OAAA,CAACL,MAAM;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVtB,OAAA,CAACH,SAAS;MAAC0B,WAAW,EAAElB;IAAiB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5CtB,OAAA,CAACJ,WAAW;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV;AAACpB,EAAA,CA3CQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}